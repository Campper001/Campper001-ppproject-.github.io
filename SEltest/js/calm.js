let weights = {};
document.addEventListener("DOMContentLoaded", function () {
    console.log('DOM fully loaded');

    const searchInput = document.getElementById('search');
    if (searchInput) {
        searchInput.addEventListener('input', function () {
            console.log('Search input changed:', this.value);
            let filter = this.value.toLowerCase();
            let list = document.querySelectorAll('#facultyList li');
            list.forEach(item => {
                item.style.display = item.textContent.toLowerCase().includes(filter) ? "" : "none";
            });
        });
    } else {
        console.error('Search input not found');
    }
    
    /////small
    const toggleText = document.querySelector(".small p");
    const content = document.getElementById("calContent");
    if (toggleText && content) {
        toggleText.addEventListener("click", function () {
            console.log('Toggle clicked, current display:', content.style.display);
            if (content.style.display === "none") {
                content.style.display = "block";
                toggleText.textContent = "‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á ü†ï";
            } else {
                content.style.display = "none";
                toggleText.textContent = "‡∏Ç‡∏¢‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á ü†ó";
            }
        });
    } else {
        console.error('Toggle text or calContent not found');
    }


    const TgMS = document.querySelector(".CLS");
    const MSS = document.getElementById("min"); // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ div ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠
    const icon = document.getElementById("iconToggle");

    if (TgMS && MSS ) {
        TgMS.addEventListener("click", function () {
            const isHidden = MSS.style.display === "none";
            MSS.style.display = isHidden ? "block" : "none";
            icon.src = isHidden ? "img/ARDW.svg" : "img/ARUP.svg";
        });
    } else {
        console.error("‡πÑ‡∏°‡πà‡∏û‡∏ö CLS ‡∏´‡∏£‡∏∑‡∏≠ min-scores");
    }
    

    ////
    const unSelect = document.querySelector('select[name="UN"]');
    if (unSelect) {
        unSelect.addEventListener('change', function () {
            console.log('University changed:', this.value);
            document.getElementById("facultyButton").textContent = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ì‡∏∞";
            document.getElementById("selectedFA").value = "";
            document.getElementById("FAsel").textContent = "";
            document.getElementById('mi1').innerText = 'N/A';
            document.getElementById('mx1').innerText = 'N/A';
            document.getElementById('mi2').innerText = 'N/A';
            document.getElementById('mx2').innerText = 'N/A';
            document.getElementById('rec').innerText = 'N/A';
            const ggElement = document.getElementById('GG');
            if (ggElement) {
                ggElement.classList.add('hidden');
                ggElement.classList.remove('block');
            }
            const scoreDivs = document.querySelectorAll('[id^="MSG"]');
            scoreDivs.forEach(div => {
                console.log(`Resetting ${div.id} to hidden`);
                div.classList.add('hidden');
                div.classList.remove('block');
            });
        });
    } else {
        console.error('University select not found');
    }

    const form = document.getElementById('UNform');
    const nameEl = document.getElementById('UNname');
    const logoEl = document.getElementById('UNLogo');
    const faselEl = document.getElementById('FAsel');

    const universityData = {
        NU: { name: '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ô‡πÄ‡∏£‡∏®‡∏ß‡∏£', logo: 'imgu/Nu.png' },
        CU: { name: '‡∏à‡∏∏‡∏¨‡∏≤‡∏•‡∏á‡∏Å‡∏£‡∏ì‡πå‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢', logo: 'imgu/chula2.png' },
        KKU: { name: '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô', logo: 'imgu/KKU.png' },
        KMUTNB: { name: '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏û‡∏£‡∏∞‡∏à‡∏≠‡∏°‡πÄ‡∏Å‡∏•‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡πÄ‡∏´‡∏ô‡∏∑‡∏≠', logo: 'imgu/KMUTNB.png' }
    };

    if (form) {
        form.addEventListener('submit', function (event) {
            event.preventDefault();
            console.log('Form submitted');
            const selectedUniversity = unSelect.value;
            const selectedFaculty = document.getElementById("selectedFA").value;

            if (!selectedUniversity) {
                alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏Å‡πà‡∏≠‡∏ô');
                console.log('No university selected');
                return;
            }

            if (!selectedFaculty) {
                alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ì‡∏∞‡∏Å‡πà‡∏≠‡∏ô');
                console.log('No faculty selected');
                return;
            }

            updateCoreInfo(selectedFaculty);

            const university = universityData[selectedUniversity];
            if (university) {
                console.log('Updating university info:', university);
                nameEl.textContent = university.name;
                logoEl.src = university.logo;
                logoEl.alt = university.name;
            } else {
                console.log('University not found in universityData');
                nameEl.textContent = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢';
                logoEl.src = '';
                logoEl.alt = '';
            }

            faselEl.textContent = selectedFaculty || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ì‡∏∞';
            showResult();
            calculateScore();

            window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });
        });
    } else {
        console.error('Form not found');
    }
});

function openModal() {
    const selectedUniversity = document.querySelector('select[name="UN"]').value;
    console.log('Opening modal for university:', selectedUniversity);

    if (!selectedUniversity) {
        alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏Å‡πà‡∏≠‡∏ô");
        return;
    }

    fetch("get_faculties.php", {
        method: "POST",
        headers: {
            "Content-Type": "application/x-www-form-urlencoded"
        },
        body: "university=" + encodeURIComponent(selectedUniversity)
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.text();
    })
    .then(data => {
        document.getElementById("facultyList").innerHTML = data;
        document.getElementById("modal").classList.remove("hidden");
        console.log('Modal opened, faculty list updated');
    })
    .catch(error => {
        console.error('Error fetching faculties:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ì‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
    });
}

function closeModal() {
    console.log('Closing modal');
    document.getElementById("modal").classList.add("hidden");
}

function selectFA(faculty) {
    console.log('Faculty selected:', faculty);
    document.getElementById('facultyButton').innerText = faculty;
    document.getElementById('selectedFA').value = faculty;
    document.getElementById('FAsel').innerText = faculty;
    closeModal();

    updateCoreInfo(faculty);

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï div ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
    const scoreDivs = document.querySelectorAll('[id^="MSG"]');
    scoreDivs.forEach(div => {
        const key = div.id.replace('MSG', '');
        div.innerText = div.getAttribute('data-original-text') || div.innerText;
        div.classList.add('hidden');
        div.classList.remove('block');
        console.log(`Reset ${div.id} to original state`);
    });

    fetch('fetch_data.php', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: 'FA_cla=' + encodeURIComponent(faculty)
    })
    .then(response => {
        console.log('Fetch response status:', response.status);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        console.log('Faculty data loaded:', data);
        if (data.error) {
            console.error('Server error:', data.error);
            alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ' + data.error);
            return;
        }

        document.getElementById('mi1').innerText = data.PointMin1 || 'N/A';
        document.getElementById('mx1').innerText = data.PointMax1 || 'N/A';
        document.getElementById('mi2').innerText = data.PointMin2 || 'N/A';
        document.getElementById('mx2').innerText = data.PointMax2 || 'N/A';
        document.getElementById('rec').innerText = data.quantity || 'N/A';

        const minimumScores = data.minimum_scores || {};
        console.log('Minimum scores:', minimumScores);

        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏µ‡∏¢‡πå PAX ‡πÄ‡∏õ‡πá‡∏ô GPAX
        const scoreMessages = {
            'CDM': '‡∏à‡∏ô.‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡∏ï‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏≤‡∏£‡∏∞‡∏Ø ‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {CDM}',
            'CDS': '‡∏à‡∏ô.‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡∏ï‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏≤‡∏£‡∏∞‡∏Ø ‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ {CDS}',
            'CDE': '‡∏à‡∏ô.‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡∏ï‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏≤‡∏£‡∏∞‡∏Ø ‡∏†‡∏≤‡∏©‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® {CDE}',
            'GPAX': '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {GPAX}',
            'MSTG1': 'TGAT1-‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSTG1}',
            'MSTG2': 'TGAT2-‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSTG2}',
            'MSTG3': 'TGAT3-‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏ô‡∏∞ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSTG3}',
            'MSTG': 'TGAT ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSTG}',
            'MSTP1': 'TPAT1-‡πÄ‡∏ä‡∏≤‡∏ß‡πå ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSTP1}',
            'MSTP2': 'TPAT2-‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î‡∏®‡∏¥‡∏•‡∏õ‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå {MSTP2}',
            'MSTP3': 'TPAT3-‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Ø {MSTP3}',
            'MSTP4': 'TPAT4-‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡πå ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSTP4}',
            'MSTP5': 'TPAT5-‡∏Ñ‡∏£‡∏π ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSTP5}',
            'MSAMath1': 'A-Level-‡∏Ñ‡∏ì‡∏¥‡∏ï1 ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSAMath1}',
            'MSAMath2': 'A-Level-‡∏Ñ‡∏ì‡∏¥‡∏ï2 ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSAMath2}',
            'MSASci': 'A-Level-‡∏ß‡∏¥‡∏ó‡∏¢‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSASci}',
            'MSAPhy': 'A-Level-‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSAPhy}',
            'MSAChe': 'A-Level-‡πÄ‡∏Ñ‡∏°‡∏µ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSAChe}',
            'MSABio': 'A-Level-‡∏ä‡∏µ‡∏ß‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSABio}',
            'MSASoci': 'A-Level-‡∏™‡∏±‡∏á‡∏Ñ‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSASoci}',
            'MSAThai': 'A-Level-‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSAThai}',
            'MSAEnglish': 'A-Level-‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSAEnglish}',
            'MSAFrench': 'A-Level-‡∏ù‡∏£‡∏±‡πà‡∏á‡πÄ‡∏®‡∏™ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSAFrench}',
            'MSAGerman': 'A-Level-‡πÄ‡∏¢‡∏≠‡∏£‡∏°‡∏±‡∏ô ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSAGerman}',
            'MSAJapan': 'A-Level-‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSAJapan}',
            'MSAKorean': 'A-Level-‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSAKorean}',
            'MSAchinese': 'A-Level-‡∏à‡∏µ‡∏ô ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSAchinese}',
            'MSASpanish': 'A-Level-‡∏™‡πÄ‡∏õ‡∏ô ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSASpanish}',
            'MSABali': 'A-Level-‡∏ö‡∏≤‡∏•‡∏µ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSABali}',
            'MSIELTS': 'IELTS ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSIELTS}',
            'MSTOEFLIBT': 'TOEFL iBT ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSTOEFLIBT}',
            'MSTOEFLPBT': 'TOEFL PBT ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSTOEFLPBT}',
            'MSTOEFLCBT': 'TOEFL CBT ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSTOEFLCBT}',
            'MSSEC': '‡∏ú‡∏•‡∏£‡∏ß‡∏° A-Level-‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå ‡πÄ‡∏Ñ‡∏°‡∏µ ‡∏ä‡∏µ‡∏ß‡∏∞ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MSSEC}',
            'MS1PCBE': '‡∏ú‡∏•‡∏£‡∏ß‡∏° A-Level-‡∏Ñ‡∏ì‡∏¥‡∏ï 1 ‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå ‡πÄ‡∏Ñ‡∏°‡∏µ ‡∏ä‡∏µ‡∏ß‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤ ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ {MS1PCBE}',
        };

        for (const [key, value] of Object.entries(minimumScores)) {
            const divId = `MSG${key}`;
            const divElement = document.getElementById(divId);
            if (divElement) {
                console.log(`Processing ${divId} with key ${key}, value: ${value}`);
                if (value > 0) {
                    const originalText = scoreMessages[key] || divElement.innerText;
                    divElement.setAttribute('data-original-text', originalText);
                    divElement.innerText = originalText.replace(`{${key}}`, value.toFixed(2));
                    divElement.classList.remove('hidden');
                    divElement.classList.add('block');
                    console.log(`Updated ${divId} to: ${divElement.innerText}`);
                } else {
                    divElement.classList.add('hidden');
                    divElement.classList.remove('block');
                    console.log(`Hid ${divId}, value <= 0`);
                }
            } else {
                console.error(`Div ${divId} not found`);
            }
        }

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏à‡∏≤‡∏Å fetch_weights.php
        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï div ‡∏™‡∏π‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
        const weightDivs = document.querySelectorAll('[id="gpx"], [id^="Tgat"], [id^="Tpat"], [id^="AL"]');
        weightDivs.forEach(div => {
            div.innerText = div.getAttribute('data-original-text') || div.innerText;
            div.classList.add('hidden');
            div.classList.remove('block');
            console.log(`Reset ${div.id} to original state`);
        });

        // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏à‡∏≤‡∏Å fetch_weights.php
        fetch('fetch_weights.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: 'FA_cla=' + encodeURIComponent(faculty)
        })
        .then(response => {
            console.log('Fetch weights response status:', response.status);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('Weights data loaded:', data);
            if (data.error) {
                console.error('Server error:', data.error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ' + data.error);
                return;
            }

            weights = data.weights || {};
            
            const weightDivs = [
                { id: 'gpx_weg', label: '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', key: 'gpx' },
                { id: 'Tgat_weg', label: 'TGAT ', key: 'Tgat' },
                { id: 'Tgat1_weg', label: 'TGAT1-‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©', key: 'Tgat1' },
                { id: 'Tgat2_weg', label: 'TGAT2-‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•', key: 'Tgat2' },
                { id: 'Tgat3_weg', label: 'TGAT3-‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏ô‡∏∞', key: 'Tgat3' },
                { id: 'Tpat1_weg', label: 'TPAT1-‡πÄ‡∏ä‡∏≤‡∏ß‡πå', key: 'Tpat1' },
                { id: 'Tpat2_weg', label: 'TPAT2-‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î‡∏®‡∏¥‡∏•‡∏õ‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', key: 'Tpat2' },
                { id: 'Tpat3_weg', label: 'TPAT3-‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Ø', key: 'Tpat3' },
                { id: 'Tpat4_weg', label: 'TPAT4-‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡πå', key: 'Tpat4' },
                { id: 'Tpat5_weg', label: 'TPAT5-‡∏Ñ‡∏£‡∏π', key: 'Tpat5' },
                { id: 'AL1_weg', label: 'A-Level-‡∏Ñ‡∏ì‡∏¥‡∏ï1', key: 'AL1' },
                { id: 'AL2_weg', label: 'A-Level-‡∏Ñ‡∏ì‡∏¥‡∏ï2', key: 'AL2' },
                { id: 'ALsci_weg', label: 'A-Level-‡∏ß‡∏¥‡∏ó‡∏¢‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ', key: 'ALsci' },
                { id: 'ALphy_weg', label: 'A-Level-‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå', key: 'ALphy' },
                { id: 'ALchm_weg', label: 'A-Level-‡πÄ‡∏Ñ‡∏°‡∏µ', key: 'ALchm' },
                { id: 'ALbio_weg', label: 'A-Level-‡∏ä‡∏µ‡∏ß‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤', key: 'ALbio' },
                { id: 'ALscd_weg', label: 'A-Level-‡∏™‡∏±‡∏á‡∏Ñ‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤', key: 'ALscd' },
                { id: 'ALthi_weg', label: 'A-Level-‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢', key: 'ALthi' },
                { id: 'ALeng_weg', label: 'A-Level-‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©', key: 'ALeng' },
                { id: 'ALfan_weg', label: 'A-Level-‡∏ù‡∏£‡∏±‡πà‡∏á‡πÄ‡∏®‡∏™', key: 'ALfan' },
                { id: 'ALger_weg', label: 'A-Level-‡πÄ‡∏¢‡∏≠‡∏£‡∏°‡∏±‡∏ô', key: 'ALger' },
                { id: 'ALjap_weg', label: 'A-Level-‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô', key: 'ALjap' },
                { id: 'ALkor_weg', label: 'A-Level-‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ', key: 'ALkor' },
                { id: 'ALchi_weg', label: 'A-Level-‡∏à‡∏µ‡∏ô', key: 'ALchi' },
                { id: 'ALsph_weg', label: 'A-Level-‡∏™‡πÄ‡∏õ‡∏ô', key: 'ALsph' },
                { id: 'ALbai_weg', label: 'A-Level-‡∏ö‡∏≤‡∏•‡∏µ', key: 'ALbai' },
                { id: 'SEC_weg', label: '‡∏ú‡∏•‡∏£‡∏ß‡∏° A-Level-‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå ‡πÄ‡∏Ñ‡∏°‡∏µ ‡∏ä‡∏µ‡∏ß‡∏∞', key: 'SEC' },
                { id: 'PCBE1_weg', label: '‡∏ú‡∏•‡∏£‡∏ß‡∏° A-Level-‡∏Ñ‡∏ì‡∏¥‡∏ï 1 ‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå ‡πÄ‡∏Ñ‡∏°‡∏µ ‡∏ä‡∏µ‡∏ß‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤ ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©,', key: 'PCBE1' }
            ];

            weightDivs.forEach(div => {
                const divElement = document.getElementById(div.id);
                if (divElement) {
                    const originalText = `${div.label} {${div.key}}`;
                    divElement.setAttribute('data-original-text', originalText);
                    const weight = weights[div.key] || 0;
                    console.log(`Processing ${div.id} with key ${div.key}, weight: ${weight}`);
                    if (weight > 0) {
                        divElement.innerText = originalText.replace(`{${div.key}}`, weight.toFixed(2) + " %");
                        divElement.classList.remove('hidden');
                        divElement.classList.add('block');
                        console.log(`Updated ${div.id} to: ${divElement.innerText}`);
                    } else {
                        divElement.classList.add('hidden');
                        divElement.classList.remove('block');
                        console.log(`Hid ${div.id}, weight <= 0`);
                    }
                } else {
                    console.error(`Div ${div.id} not found`);
                }
            });


            calculateScore();
        })
        .catch(error => {
            console.error('Error fetching weights:', error);
            alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
            const weightDivs = document.querySelectorAll('[id="gpx"], [id^="Tgat"], [id^="Tpat"], [id^="AL"]');
            weightDivs.forEach(div => {
                div.classList.add('hidden');
                div.classList.remove('block');
            });
        });
    });
}

function showResult() {
    const ggElement = document.getElementById('GG');
    if (ggElement) {
        ggElement.classList.remove('hidden');
        ggElement.classList.add('block');
        console.log('Result section shown');
    }
}

function updateCoreInfo(faculty) {
    fetch('fetch_core_data.php', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: 'FA_cla=' + encodeURIComponent(faculty)
    })
    .then(response => response.json())
    .then(data => {
        if (data.status === 'success') {
            const coreInfo = data.coreInfo;

            // üîç log ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ù‡∏±‡πà‡∏á server
            console.log('Core data received:');
            console.log('Core:', coreInfo.core);
            console.log('International:', coreInfo.international);
            console.log('Vocation:', coreInfo.vocation);
            console.log('NFE:', coreInfo.nfe);
            console.log('GED:', coreInfo.ged);

            console.log('Core Info received from server:', coreInfo);
            for (const key in coreInfo) {
                const el = document.getElementById(key);
                if (!el) {
                    console.warn(`Element with id "${key}" not found.`);
                    continue;
                }

                const img = el.querySelector('img');
                const textDiv = el.querySelector('div');

                if (img) img.src = coreInfo[key].img;
                if (textDiv) textDiv.textContent = coreInfo[key].text;
            }
        } else {
            console.error('Server error:', data.error);
        }
    })
    .catch(err => {
        console.error('Failed to fetch core info:', err);
    });
}

document.addEventListener("DOMContentLoaded", function () {
    const keys = [
        "gpx", "Tgat1", "Tgat2", "Tgat3",
        "Tpat1", "Tpat12", "Tpat13", "Tpat21", "Tpat22", "Tpat23",
        "Tpat3", "Tpat4", "Tpat5",
        "AL1", "AL2", "ALsci", "ALphy", "ALchm", "ALbio", "ALscd", "ALthi", "ALeng",
        "ALfan", "ALger", "ALjap", "ALkor", "ALchi", "ALbai", "ALsph"
    ];

    keys.forEach(key => {
        const el = document.getElementById("in" + key);
        if (el) el.value = localStorage.getItem(key) || "";
    });

    calculateScore();

    document.querySelectorAll("input[id^='in']").forEach(input => {
        input.addEventListener("input", calculateScore);
    });
});

function calculateScore() {
    const getVal = id => parseFloat(document.getElementById(id)?.value || 0);
    const getWeight = id => {
        const text = document.getElementById(id)?.innerText || "0";
        return parseFloat(text.replace("%", "")) || 0;
    };

    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    const gpx = getVal("ingpx");
    const Tgat1 = getVal("inTgat1");
    const Tgat2 = getVal("inTgat2");
    const Tgat3 = getVal("inTgat3");
    const Tgat = (Tgat1 + Tgat2 + Tgat3) / 300;

    const Tpat1 = getVal("inTpat1");
    const Tpat2 = getVal("inTpat2");
    const Tpat3 = getVal("inTpat3");
    const Tpat4 = getVal("inTpat4");
    const Tpat5 = getVal("inTpat5");

    const AL1 = getVal("inAL1");
    const AL2 = getVal("inAL2");
    const ALsci = getVal("inALsci");
    const ALphy = getVal("inALphy");
    const ALchm = getVal("inALchm");
    const ALbio = getVal("inALbio");
    const ALscd = getVal("inALscd");
    const ALthi = getVal("inALthi");
    const ALeng = getVal("inALeng");
    const ALfan = getVal("inALfan");
    const ALger = getVal("inALger");
    const ALjap = getVal("inALjap");
    const ALkor = getVal("inALkor");
    const ALchi = getVal("inALchi");
    const ALbai = getVal("inALbai");
    const ALsph = getVal("inALsph");

    const getW = key => getWeight(key + "_weg");
    let total = 0;

    const items = [
        { key: "gpx", score: gpx / 4, weight: getW("gpx") },
        { key: "Tgat", score: Tgat, weight: getW("Tgat") },
        { key: "Tpat1", score: Tpat1 / 100, weight: getW("Tpat1") },
        { key: "Tpat2", score: Tpat2 / 100, weight: getW("Tpat2") },
        { key: "Tpat3", score: Tpat3 / 100, weight: getW("Tpat3") },
        { key: "Tpat4", score: Tpat4 / 100, weight: getW("Tpat4") },
        { key: "Tpat5", score: Tpat5 / 100, weight: getW("Tpat5") },
        { key: "AL1", score: AL1 / 100, weight: getW("AL1") },
        { key: "AL2", score: AL2 / 100, weight: getW("AL2") },
        { key: "ALsci", score: ALsci / 100, weight: getW("ALsci") },
        { key: "ALphy", score: ALphy / 100, weight: getW("ALphy") },
        { key: "ALchm", score: ALchm / 100, weight: getW("ALchm") },
        { key: "ALbio", score: ALbio / 100, weight: getW("ALbio") },
        { key: "ALscd", score: ALscd / 100, weight: getW("ALscd") },
        { key: "ALthi", score: ALthi / 100, weight: getW("ALthi") },
        { key: "ALeng", score: ALeng / 100, weight: getW("ALeng") },
        { key: "ALfan", score: ALfan / 100, weight: getW("ALfan") },
        { key: "ALger", score: ALger / 100, weight: getW("ALger") },
        { key: "ALjap", score: ALjap / 100, weight: getW("ALjap") },
        { key: "ALkor", score: ALkor / 100, weight: getW("ALkor") },
        { key: "ALchi", score: ALchi / 100, weight: getW("ALchi") },
        { key: "ALbai", score: ALbai / 100, weight: getW("ALbai") },
        { key: "ALsph", score: ALsph / 100, weight: getW("ALsph") },
        { key: "SEC", score: (ALphy + ALchm + ALbio) / 300, weight: getW("SEC") },
        { key: "PCBE1", score: (AL1 + ALphy + ALchm + ALbio + ALeng) / 500, weight: getW("PCBE1") }
    ];

    console.log("=========== ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ==========");
    items.forEach(({ key, score, weight }) => {
        const part = score * weight;
        console.log(`${key}: (${score.toFixed(4)} √ó ${weight.toFixed(2)}) = ${part.toFixed(2)}`);
        total += part;
    });

    const resultBox = document.getElementById("SCX");
    if (resultBox) {
        resultBox.innerText = total.toFixed(2);
        console.log("üíØ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", total.toFixed(2));
    }
}
